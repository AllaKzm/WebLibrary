// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20210522081110_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Models.Books", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnName("BookID")
                        .HasColumnType("INT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("GenId")
                        .HasColumnName("GenID")
                        .HasColumnType("INT");

                    b.Property<int>("PubId")
                        .HasColumnName("PubID")
                        .HasColumnType("INT");

                    b.Property<DateTime>("PubYear")
                        .HasColumnType("DATE");

                    b.HasKey("BookId");

                    b.HasIndex("GenId");

                    b.HasIndex("PubId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Models.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .HasColumnName("EmpID")
                        .HasColumnType("INT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnName("passportData")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(11)");

                    b.Property<int>("PositionId")
                        .HasColumnName("PositionID")
                        .HasColumnType("INT");

                    b.HasKey("EmpId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Library.Models.Genres", b =>
                {
                    b.Property<int>("GenId")
                        .HasColumnName("GenID")
                        .HasColumnType("INT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("GenTitle")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("GenId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Library.Models.IssuedBooks", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnName("BookID")
                        .HasColumnType("INT");

                    b.Property<int>("EmpId")
                        .HasColumnName("EmpID")
                        .HasColumnType("INT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("DATE");

                    b.Property<int>("ReadId")
                        .HasColumnName("ReadID")
                        .HasColumnType("INT");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("ReturnMark")
                        .HasColumnType("DATE");

                    b.HasIndex("BookId");

                    b.HasIndex("EmpId");

                    b.HasIndex("ReadId");

                    b.ToTable("IssuedBooks");
                });

            modelBuilder.Entity("Library.Models.Positions", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnName("PositionID")
                        .HasColumnType("INT");

                    b.Property<string>("Demands")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Duties")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<double>("Salary")
                        .HasColumnType("FLOAT");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Library.Models.Publisher", b =>
                {
                    b.Property<int>("PubId")
                        .HasColumnName("PubID")
                        .HasColumnType("INT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("PublicistTitle")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("PubId");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("Library.Models.Reader", b =>
                {
                    b.Property<int>("ReadId")
                        .HasColumnName("ReadID")
                        .HasColumnType("INT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("ReadId");

                    b.ToTable("Reader");
                });

            modelBuilder.Entity("Library.Models.Books", b =>
                {
                    b.HasOne("Library.Models.Genres", "Gen")
                        .WithMany("Books")
                        .HasForeignKey("GenId")
                        .IsRequired();

                    b.HasOne("Library.Models.Publisher", "Pub")
                        .WithMany("Books")
                        .HasForeignKey("PubId")
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Models.Employee", b =>
                {
                    b.HasOne("Library.Models.Positions", "Position")
                        .WithMany("Employee")
                        .HasForeignKey("PositionId")
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Models.IssuedBooks", b =>
                {
                    b.HasOne("Library.Models.Books", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .IsRequired();

                    b.HasOne("Library.Models.Employee", "Emp")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .IsRequired();

                    b.HasOne("Library.Models.Reader", "Read")
                        .WithMany()
                        .HasForeignKey("ReadId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
